#!/usr/bin/perl -w

package SNMP;
	use strict;
	use Data::Dumper;

	my $nametable={
		"sysDescr"		=> { oid => ".1.3.6.1.2.1.1.1" },
		"sysName"		=> { oid => ".1.3.6.1.2.1.1.5" },
		"upsIdentManufacturer"	=> { oid => ".1.3.6.1.2.1.33.1.1.1" },
		"upsIdentModel"		=> { oid => ".1.3.6.1.2.1.33.1.1.2" },
		"upsIdentUPSSoftwareVersion"	=> { oid => ".1.3.6.1.2.1.33.1.1.3" },
		"upsIdentName"		=> { oid => ".1.3.6.1.2.1.33.1.1.5" },

		"upsBatteryStatus"	=> { oid => ".1.3.6.1.2.1.33.1.2.1",
						value => 'table',
						values => {
							1 => 'unknown',
							2 => 'batteryNormal',
							3 => 'batteryLow',
							4 => 'batteryDepleted'
						}},
		"upsEstimatedMinutesRemaining" => { oid => ".1.3.6.1.2.1.33.1.2.3" },
		"upsEstimatedChargeRemaining" => { oid => ".1.3.6.1.2.1.33.1.2.4" },
		"upsAlarmsPresent"	=> { oid => ".1.3.6.1.2.1.33.1.6.1" }
	};

	sub new {
		my ($class, $host, $community) = @_;

		my $self={};
		bless $self, $class;

		$self->reversemap();
		$self->snmp_new_session($host, $community);

		return $self;
	}

	sub snmp_new_session {
		my ($self, $host, $community) = @_;

                my ($session,$error)=Net::SNMP->session(
			Hostname => $host,
			Version	 => 2,
			Timeout  => 2,
			Community => $community
		);

		$self->{netsnmp}=$session;
	}

	sub reversemap {
		my ($self) = @_;
		foreach my $key ( keys %{$nametable} ) {
			my $value=$nametable->{$key};
			$self->{reversetable}{$value->{oid}}=$key;
		}
	}

	sub name2oid {
		my ($self, $mixname) = @_;

		my ($name, $instance) = ($mixname =~ /^([^.]+)([\d\.]*)$/);
		my $oid=$nametable->{$name}{oid} . $instance;

		#printf("Mixname $mixname Name: $name instance $instance oid $oid\n");

		return $oid;
	}

	sub oid2name {
		my ($self, $oid) = @_;
		my ($full, $name, $instance) = $self->oid2name_all($oid);
		return $full;
	}

	sub instance_decode_string {
		my ($self, $instance) = @_;

		# .100.97.116.97.51 = STRING: "data3"
		my $string="";	
		while($instance =~ s/^\.(\d+)//) {
			$string.=chr($1);
		}
		return $string
	}

	sub instance_decode_uuidnum {
		my ($self, $instance) = @_;
		# .36.49.48.51.99.55.102.100.100.45.51.50.56.99.45.54.102.98.101.45.98.55.55.55.45.100.57.98.50.102.48.98.48.50.49.97.57.1
		$instance =~ s/^\.//;
		my @elem=split(/\./, $instance);
		my $count=shift @elem;
		my $uuid=join("", map { chr($_) } splice(@elem, 0, $count));

		return sprintf('"%s".%s', $uuid, join(".", @elem));
	}


	sub value_decode_table {
		my ($self, $value, $def) = @_;

		my $tvalue=$def->{values}{$value};
		if (defined($tvalue)) {
			return { value => $value, string => $tvalue, full => sprintf("%s(%d)", $tvalue, $value) };
		}

		return { value => $value };
	}

	sub value_decode {
		my ($self, $name, $value) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{value})) {
			return { value => $value };
		}

		if ($def->{value} eq "table") {
			return $self->value_decode_table($value, $def);
		}

		return { value => $value };
	}

	sub instance_decode {
		my ($self, $name, $instance) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{instance})) {
			return $instance;
		}

		if ($def->{instance} eq 'string') {
			return $self->instance_decode_string($instance);
		} elsif ($def->{instance} eq 'uuidnum') {
			return $self->instance_decode_uuidnum($instance);
		}

		return $instance;
	}

	sub oid2name_all {
		my ($self, $oid) = @_;

		my $instance="";
		while(length($oid) > 1) {
			my $name=$self->{reversetable}{$oid};
			if (defined($name)) {
				return ( $name . $instance, $name, $self->instance_decode($name, $instance) );
			}

			$oid =~ s/(\.\d+)$//;
			$instance=$1 . $instance;
		}
		die("OID Problem: $oid $instance");
	}

	sub _parse_request {
		my $self=shift;
		my @request=map { $self->name2oid($_) } @_;
		return \@request;
	}

	sub _parse_response {
		my ($self, $roid, $error) = @_;

		my $r={};
		foreach my $k ( keys %{$roid} ) {
			my $value=$roid->{$k};
			my ($full, $name, $instance)=$self->oid2name_all($k);
			$r->{$full}={ name => $name, instance => $instance, value => $self->value_decode($name, $value) };
		}

		$r->{_error}=$error;

		return $r;
	}

	
	sub get {
		my ($self, @args) = @_;

		my $r=$self->{netsnmp}->get_request(-varbindlist =>
			$self->_parse_request(@args));

		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

1;

package UPS;
	use strict;
	use Net::SNMP;
	use Data::Dumper;

	sub new {
		my ($class, $snmp) = @_;

		my $self = {
			snmp => $snmp,
		};

		bless $self, $class;
		return $self;
	}

	sub read {
		my ($self) = @_;

		if (!$self->identify()) {
			return 0;
		}
		$self->battery_read();
		$self->alarm_read();
	}

	sub error {
		my ($self) = @_;
		return $self->{error};
	}

	sub alarm_read {
		my ($self) = @_;

		$self->{alarms}=$self->{snmp}->get(
			"upsAlarmsPresent.0");
	}
	
	sub alarm_count {
		my ($self) = @_;

		my $alarms=$self->{alarms};
		my $count=$alarms->{"upsAlarmsPresent.0"}{value}{value};

		return $count;
	}

	sub battery_read {
		my ($self) = @_;

		$self->{battery}=$self->{snmp}->get(
			"upsBatteryStatus.0",
			"upsEstimatedMinutesRemaining.0",
			"upsEstimatedChargeRemaining.0");
	}

	sub battery_ok {
		my ($self) = @_;
		my $b=$self->{battery};
		my $status=$b->{"upsBatteryStatus.0"};

		return $status->{value}{string} =~ /batteryNormal/;
	}

	sub battery_status {
		my ($self) = @_;

		my $b=$self->{battery};
		my $status=$b->{"upsBatteryStatus.0"};

		return $status->{value}{full};
	}

	sub battery_time_remaining_minutes {
		my ($self) = @_;

		my $b=$self->{battery};
		my $status=$b->{"upsEstimatedMinutesRemaining.0"};

		return $status->{value}{value};
	}

	sub battery_left_percentage {
		my ($self) = @_;

		my $b=$self->{battery};
		my $status=$b->{"upsEstimatedChargeRemaining.0"};

		return $status->{value}{value};
	}


	sub identify {
		my ($self) =@_;

		$self->{id}=$self->{snmp}->get(
			"sysDescr.0",
			"upsIdentManufacturer.0",
			"upsIdentModel.0",
			"upsIdentUPSSoftwareVersion.0",
			"upsIdentName.0");

		if ($self->{id}{_error} ne '') {
			$self->{error}=$self->{id}{_error};
			return 0;
		}
		return 1;
	}

	sub manufacturer {
		my ($self) =@_;
		return $self->{id}{"upsIdentManufacturer.0"}{value}{value};
	}

	sub model {
		my ($self) =@_;
		return $self->{id}{"upsIdentModel.0"}{value}{value};
	}

1;

package main;

	use strict;
	use open IO => ":encoding(utf-8)";
	use open ':std';
	use Data::Dumper;
	use POSIX;

	use Monitoring::Plugin;
	use Getopt::Long::Descriptive;
	use FindBin qw($Bin $Script);

	my ($opt, $usage) = describe_options(
		"$Script %o <some-arg>",
		[ 'host|H=s',		"Nexenta hostname", { required => 1 } ],
		[ 'community|C=s',	"Nexenta hostname", { default => 'public' } ],
		[ 'timeout|t=i',	"Timeout", { default => 15 } ],
		[ 'brw=s',		"Battery minutes remaining warning", { default => "10:" } ],
		[ 'brc=s',		"Battery minutes remaining critical", { default => "5:" } ],
		[],
		[ 'help',               "print usage message and exit", { shortcircuit => 1 } ],
	);

	print($usage->text), exit if $opt->help;

	my $np = Monitoring::Plugin->new(
		timeout => $opt->timeout
	);

	my $snmp=new SNMP($opt->host, $opt->community);
	my $ups=new UPS($snmp);
	if (!$ups->read()) {
		$np->plugin_exit(UNKNOWN, sprintf("Failed to read: %s", $ups->error()));
	}

	$np->add_message(OK, sprintf("%s %s", $ups->manufacturer(), $ups->model()));

	$np->add_message($ups->battery_ok() ? OK : CRITICAL,
		sprintf("Battery status: %s", $ups->battery_status()));

	$np->add_message(($ups->alarm_count() == 0) ? OK : CRITICAL,
		sprintf("Alarm count: %d", $ups->alarm_count()));


	my $minremainingt=$np->set_thresholds(
		warning => $opt->brw,
		critical => $opt->brc );
	my $minremaining=$ups->battery_time_remaining_minutes();
	$np->add_perfdata(
		label => "Time Remain",
		value => $minremaining,
		threshold => $minremainingt
	);
	my $bcode=$minremainingt->get_status($minremaining);
	$np->add_message($bcode, sprintf("Battery remaining time: %d", $minremaining));


	$np->add_perfdata(
		label => "Charge Remain",
		value => $ups->battery_left_percentage(),
		uom => '%'
	);

	my ($code, $message) = $np->check_messages();
	$np->plugin_exit( $code, $message );
1;
